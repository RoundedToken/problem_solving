const top = 0;
const parent = (i) => ((i + 1) >>> 1) - 1;
const left = (i) => (i << 1) + 1;
const right = (i) => (i + 1) << 1;

class PriorityQueue {
    constructor(comparator = (a, b) => a > b) {
        this._heap = [];
        this._comparator = comparator;
    }
    size() {
        return this._heap.length;
    }
    push(...values) {
        values.forEach((value) => {
            this._heap.push(value);
            this._siftUp();
        });
        return this.size();
    }
    pop() {
        const poppedValue = this._heap[top];
        const bottom = this.size() - 1;
        if (bottom > top) {
            this._swap(top, bottom);
        }
        this._heap.pop();
        this._siftDown();
        return poppedValue;
    }
    _greater(i, j) {
        return this._comparator(this._heap[i], this._heap[j]);
    }
    _swap(i, j) {
        [this._heap[i], this._heap[j]] = [this._heap[j], this._heap[i]];
    }
    _siftUp() {
        let node = this.size() - 1;
        while (node > top && this._greater(node, parent(node))) {
            this._swap(node, parent(node));
            node = parent(node);
        }
    }
    _siftDown() {
        let node = top;
        while (
            (left(node) < this.size() && this._greater(left(node), node)) ||
            (right(node) < this.size() && this._greater(right(node), node))
        ) {
            let maxChild =
                right(node) < this.size() && this._greater(right(node), left(node))
                    ? right(node)
                    : left(node);
            this._swap(node, maxChild);
            node = maxChild;
        }
    }
}

const createGraph = (roads) => {
    const graph = new Map();

    for (const road of roads) {
        const [a, b, l] = road;
        const pairsFrom = graph.get(a);
        const pairsTo = graph.get(b);

        if (pairsFrom) {
            pairsFrom.push({ to: b, S: l });
        } else {
            graph.set(a, [{ to: b, S: l }]);
        }

        if (pairsTo) {
            pairsTo.push({ to: a, S: l });
        } else {
            graph.set(b, [{ to: a, S: l }]);
        }
    }

    return graph;
};

const createCityParamsAndOrder = (input) => {
    const cityOrder = input
        .map((p, i) => {
            const [T, V] = p.trim().split(' ').map(Number);

            return { city: i + 2, T, V };
        })
        .sort((a, b) => -a.V + b.V);

    return cityOrder;
};

const shortestPath = (from, graph, N) => {
    const minPriorityQueue = new PriorityQueue((a, b) => a[1] < b[1]);
    minPriorityQueue.push([from, 0]);
    const visited = new Set();
    const dist = Array(N + 1).fill(Infinity);
    const prev = [];
    prev[from] = -1;
    dist[from] = 0;

    while (minPriorityQueue.size() > 0) {
        const [minInd, minValue] = minPriorityQueue.pop();

        if (visited.has(minInd)) {
            continue;
        }

        visited.add(minInd);

        const pairs = graph.get(minInd);

        if (pairs) {
            for (const pair of pairs) {
                const { to, S } = pair;
                const candidate = S + minValue;

                if (candidate < dist[to]) {
                    dist[to] = candidate;
                    prev[to] = minInd;
                    minPriorityQueue.push([to, candidate]);
                }
            }
        }
    }

    return dist;
};

const solution = (input) => {
    input = input.trim().split('\n');
    const N = Number(input[0]);
    const cityOrder = createCityParamsAndOrder(input.slice(2, 1 + N));
    const roads = input.slice(1 + N).map((r) => r.trim().split(' ').map(Number));
    const graph = createGraph(roads);
    const times = Array(N + 1).fill(Infinity);
    const routes = Array(N + 1)
        .fill(0)
        .map(() => []);
    let maxTime = -Infinity;
    let maxR;

    const fromMoscow = shortestPath(1, graph, N);

    for (let i = 0; i < cityOrder.length; i++) {
        const { city: a, V, T } = cityOrder[i];
        let min = fromMoscow[a] / V + T;
        const fromA = shortestPath(a, graph, N);
        let r = [a];
        let qq = [];

        for (let g = 0; g < i; g++) {
            const { city: b } = cityOrder[g];
            const timeToB = fromA[b] / V + T;
            const guess = timeToB + times[b];

            if (guess < min) {
                qq = [b, ...routes[b]];
                min = guess;
            }
        }
        routes[a] = qq;

        r.push(...qq, 1);

        times[a] = min;

        if (min > maxTime) {
            maxTime = min;
            maxR = r;
        }
    }

    return `${maxTime}\n${maxR.join(' ')}`;
};

function main() {
    // console
    // .log
    //     solution(`400
    // 1 100
    // 1 99
    // 1 98
    // 1 97
    // 1 96
    // 1 95
    // 1 94
    // 1 93
    // 1 92
    // 1 91
    // 1 90
    // 1 89
    // 1 88
    // 1 87
    // 1 86
    // 1 85
    // 1 84
    // 1 83
    // 1 82
    // 1 81
    // 1 80
    // 1 79
    // 1 78
    // 1 77
    // 1 76
    // 1 75
    // 1 74
    // 1 73
    // 1 72
    // 1 71
    // 1 70
    // 1 69
    // 1 68
    // 1 67
    // 1 66
    // 1 65
    // 1 64
    // 1 63
    // 1 62
    // 1 61
    // 1 60
    // 1 59
    // 1 58
    // 1 57
    // 1 56
    // 1 55
    // 1 54
    // 1 53
    // 1 52
    // 1 51
    // 1 50
    // 1 49
    // 1 48
    // 1 47
    // 1 46
    // 1 45
    // 1 44
    // 1 43
    // 1 42
    // 1 41
    // 1 40
    // 1 39
    // 1 38
    // 1 37
    // 1 36
    // 1 35
    // 1 34
    // 1 33
    // 1 32
    // 1 31
    // 1 30
    // 1 29
    // 1 28
    // 1 27
    // 1 26
    // 1 25
    // 1 24
    // 1 23
    // 1 22
    // 1 21
    // 1 20
    // 1 19
    // 1 18
    // 1 17
    // 1 16
    // 1 15
    // 1 14
    // 1 13
    // 1 12
    // 1 11
    // 1 10
    // 1 9
    // 1 8
    // 1 7
    // 1 6
    // 1 5
    // 1 4
    // 1 3
    // 1 2
    // 1 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 100 1
    // 189 91 8431
    // 123 91 8693
    // 349 123 6629
    // 349 301 2817
    // 59 301 1217
    // 376 59 1817
    // 368 376 6823
    // 368 338 7523
    // 226 338 315
    // 138 226 632
    // 138 283 2550
    // 305 283 6069
    // 289 305 2873
    // 167 289 7476
    // 269 167 9185
    // 390 269 6379
    // 390 373 2699
    // 83 373 5410
    // 234 83 3418
    // 234 388 9003
    // 371 388 3479
    // 371 112 1981
    // 112 288 5753
    // 288 182 1633
    // 156 182 1173
    // 156 344 2161
    // 344 356 487
    // 356 171 5389
    // 171 106 7122
    // 106 364 9233
    // 364 262 2564
    // 337 262 7524
    // 337 357 9710
    // 357 164 5297
    // 163 164 9586
    // 389 163 363
    // 389 149 126
    // 149 136 4813
    // 210 136 5784
    // 210 270 8816
    // 386 270 6682
    // 386 55 528
    // 115 55 528
    // 115 318 8129
    // 277 318 7071
    // 277 323 9677
    // 323 315 4952
    // 263 315 7890
    // 263 203 5342
    // 203 248 5338
    // 248 165 357
    // 165 370 5211
    // 370 397 4043
    // 397 72 4656
    // 72 99 5163
    // 99 208 4151
    // 141 208 5999
    // 372 141 5629
    // 162 372 6598
    // 162 227 2631
    // 273 227 8039
    // 2 273 1378
    // 2 358 1381
    // 358 285 4509
    // 7 285 9267
    // 7 303 7269
    // 317 303 3898
    // 298 317 4689
    // 298 300 2984
    // 396 300 5072
    // 253 396 9547
    // 229 253 3856
    // 343 229 9311
    // 57 343 8272
    // 57 377 5572
    // 377 174 2840
    // 174 363 9139
    // 240 363 1655
    // 240 30 2594
    // 30 54 13
    // 209 54 7719
    // 87 209 9275
    // 87 33 249
    // 24 33 2775
    // 104 24 7421
    // 124 104 8836
    // 124 359 6464
    // 359 395 6978
    // 395 230 7824
    // 383 230 1250
    // 281 383 656
    // 37 281 8300
    // 160 37 7739
    // 23 160 5972
    // 118 23 3976
    // 235 118 9866
    // 276 235 6879
    // 276 101 5986
    // 302 101 1324
    // 143 302 1812
    // 319 143 1617
    // 173 319 2404
    // 173 295 3617
    // 125 295 2628
    // 125 195 6538
    // 195 168 6569
    // 307 168 8002
    // 307 217 5852
    // 217 332 4998
    // 332 28 4545
    // 219 28 15
    // 177 219 6829
    // 299 177 5030
    // 192 299 6787
    // 53 192 9208
    // 4 53 4208
    // 4 369 8093
    // 51 369 9752
    // 15 51 3350
    // 15 351 5520
    // 161 351 8710
    // 212 161 2686
    // 212 378 8403
    // 378 274 702
    // 41 274 7565
    // 207 41 9574
    // 207 254 8142
    // 320 254 4796
    // 178 320 5937
    // 178 117 4743
    // 117 132 6168
    // 335 132 2435
    // 335 348 8697
    // 348 16 3000
    // 392 16 2649
    // 392 10 5965
    // 342 10 8620
    // 342 40 42
    // 40 297 4523
    // 236 297 891
    // 137 236 8647
    // 308 137 1404
    // 353 308 429
    // 44 353 497
    // 44 12 1627
    // 147 12 9364
    // 147 181 3570
    // 181 187 4565
    // 187 150 2460
    // 134 150 1789
    // 32 134 8671
    // 32 120 1571
    // 354 120 1571
    // 202 354 2755
    // 202 326 1969
    // 128 326 7292
    // 128 374 2477
    // 374 345 665
    // 345 321 821
    // 153 321 7954
    // 153 290 3450
    // 290 145 2148
    // 145 242 190
    // 103 242 7038
    // 103 398 3278
    // 398 393 3901
    // 393 52 7683
    // 304 52 5546
    // 191 304 6660
    // 191 334 6931
    // 334 67 5454
    // 67 180 3608
    // 180 232 8774
    // 232 384 6134
    // 384 330 3438
    // 122 330 9561
    // 340 122 2710
    // 18 340 1037
    // 18 279 2213
    // 172 279 3590
    // 172 49 7769
    // 49 391 177
    // 391 310 6123
    // 310 127 2235
    // 130 127 8470
    // 142 130 2352
    // 142 77 9865
    // 77 71 6374
    // 71 13 3819
    // 13 26 8571
    // 69 26 9807
    // 69 380 541
    // 380 293 40
    // 293 98 5961
    // 42 98 3231
    // 47 42 3557
    // 97 47 6338
    // 360 97 4066
    // 94 360 7839
    // 294 94 7740
    // 294 200 5378
    // 200 313 3556
    // 296 313 4731
    // 80 296 7728
    // 80 260 2147
    // 233 260 721
    // 220 233 3329
    // 220 79 1717
    // 79 148 7096
    // 306 148 526
    // 186 306 8707
    // 135 186 1875
    // 135 152 4884
    // 152 331 6534
    // 331 102 1320
    // 102 292 9302
    // 196 292 9551
    // 196 65 1525
    // 244 65 6987
    // 244 74 2637
    // 74 105 6552
    // 400 105 1774
    // 265 400 2043
    // 361 265 1211
    // 341 361 1021
    // 341 284 326
    // 284 259 1514
    // 169 259 3545
    // 275 169 1396
    // 275 188 7767
    // 179 188 4158
    // 179 366 4225
    // 366 216 8646
    // 216 70 3693
    // 70 251 5442
    // 251 339 1669
    // 336 339 9151
    // 144 336 7372
    // 14 144 6934
    // 109 14 2742
    // 154 109 9984
    // 154 291 7400
    // 39 291 1931
    // 39 21 6397
    // 21 249 3821
    // 225 249 1627
    // 225 328 2424
    // 328 73 5414
    // 261 73 6879
    // 246 261 3939
    // 352 246 9080
    // 352 198 9919
    // 252 198 4786
    // 252 185 9601
    // 185 176 5321
    // 218 176 8398
    // 218 78 1480
    // 78 325 3004
    // 325 66 7647
    // 110 66 6633
    // 333 110 6661
    // 333 312 3964
    // 86 312 1295
    // 86 50 8603
    // 140 50 3953
    // 382 140 3663
    // 382 113 1524
    // 113 38 6389
    // 231 38 4857
    // 231 215 8071
    // 215 8 237
    // 8 84 331
    // 84 60 2958
    // 121 60 7610
    // 19 121 5453
    // 19 139 7747
    // 139 267 2676
    // 267 287 7072
    // 56 287 7818
    // 184 56 9594
    // 184 75 3365
    // 146 75 2409
    // 146 61 8271
    // 61 158 142
    // 193 158 3483
    // 193 76 533
    // 256 76 6586
    // 314 256 757
    // 314 3 3961
    // 385 3 8138
    // 224 385 5086
    // 224 95 1605
    // 100 95 1187
    // 194 100 2465
    // 11 194 4754
    // 11 90 2553
    // 90 46 2402
    // 31 46 1705
    // 221 31 528
    // 205 221 307
    // 213 205 6881
    // 379 213 6723
    // 379 111 1143
    // 111 222 260
    // 258 222 3986
    // 355 258 724
    // 355 350 922
    // 350 155 2901
    // 155 108 1466
    // 238 108 870
    // 27 238 1198
    // 43 27 4482
    // 43 197 1073
    // 197 159 5063
    // 116 159 5840
    // 116 394 1610
    // 394 324 3987
    // 45 324 1128
    // 278 45 3629
    // 375 278 2256
    // 329 375 9089
    // 129 329 720
    // 129 243 1976
    // 243 264 6397
    // 241 264 7648
    // 92 241 6695
    // 309 92 9191
    // 206 309 2444
    // 206 347 8713
    // 223 347 9675
    // 107 223 1926
    // 107 183 7148
    // 183 63 296
    // 63 204 6382
    // 204 245 2867
    // 35 245 2993
    // 35 48 9117
    // 199 48 2694
    // 199 20 9136
    // 228 20 2452
    // 228 399 3822
    // 322 399 1868
    // 114 322 2645
    // 36 114 6334
    // 36 190 2915
    // 190 201 4717
    // 151 201 1147
    // 151 282 4545
    // 282 34 4024
    // 387 34 9868
    // 126 387 626
    // 5 126 8784
    // 214 5 9407
    // 266 214 7662
    // 327 266 6235
    // 362 327 4258
    // 17 362 635
    // 367 17 6461
    // 367 286 111
    // 268 286 7186
    // 1 268 9526
    // 1 250 3046
    // 271 250 502
    // 271 237 9794
    // 237 257 2716
    // 58 257 8186
    // 9 58 7777
    // 81 9 1539
    // 81 64 6318
    // 64 175 5857
    // 346 175 1745
    // 381 346 3374
    // 25 381 6992
    // 62 25 8066
    // 62 170 5853
    // 365 170 3327
    // 93 365 5419
    // 311 93 5036
    // 311 29 2705
    // 29 157 4485
    // 157 247 2172
    // 166 247 8849
    // 88 166 8137
    // 88 119 1540
    // 316 119 2771
    // 316 85 3957
    // 85 133 6010
    // 133 239 5890
    // 272 239 2821
    // 272 131 7955
    // 96 131 7705
    // 96 211 3149
    // 211 255 6794
    // 255 68 6440
    // 6 68 8497
    // 89 6 275
    // 82 89 6447
    // 82 280 9655
    // 22 280 4626`)
    // ();
    console.log(
        solution(`4
    1 1
    10 30
    5 40
    1 10
    1 2 300
    1 3 400
    2 4 100`)
    );
    console.log(
        solution(`3
    1 1
    0 10
    0 55
    1 2 100
    2 3 10`)
    );
    console.log(
        solution(`20
        5 60
        65 96
        39 55
        7 35
        58 71
        68 5
        68 71
        94 100
        41 12
        41 14
        5 100
        96 11
        75 88
        12 86
        43 59
        0 10
        16 70
        27 79
        13 79
        66 80
        3 7 668
        3 16 993
        18 16 958
        11 18 340
        11 19 390
        8 19 733
        10 8 193
        10 17 797
        17 14 27
        14 5 616
        6 5 994
        6 20 459
        1 20 755
        1 4 719
        15 4 412
        2 15 733
        9 2 426
        9 13 201
        13 12 476`)
    );
    console.log(
        solution(`40
        40 53
        53 65
        76 88
        15 42
        64 29
        89 9
        26 62
        16 4
        15 13
        39 84
        70 92
        94 78
        55 56
        97 4
        33 23
        17 7
        15 29
        10 39
        49 24
        49 16
        64 26
        46 68
        2 36
        19 2
        85 61
        16 5
        0 37
        52 28
        31 55
        6 76
        11 75
        38 50
        70 63
        88 35
        42 96
        44 100
        54 25
        94 39
        66 36
        49 100
        24 8 9576
        7 24 1802
        8 12 3752
        12 40 2212
        12 21 1001
        12 2 1736
        29 8 6892
        40 13 8070
        17 7 2600
        18 7 3176
        38 12 8300
        18 4 8643
        13 28 4647
        38 11 4667
        7 6 5980
        3 17 2523
        35 2 3312
        22 3 4277
        14 11 2918
        37 28 4535
        33 13 6237
        8 20 5840
        7 27 2168
        6 39 8481
        7 5 3294
        32 8 9286
        15 5 3891
        6 25 7831
        30 32 5895
        26 32 4010
        3 1 1406
        8 31 2828
        14 34 6559
        36 25 160
        10 13 7488
        20 9 4903
        23 36 9187
        13 19 4033
        16 20 3706
        `)
    );
    // console.log(
    //     solution(`100
    // 65 88
    // 14 18
    // 22 37
    // 92 84
    // 72 38
    // 6 63
    // 83 29
    // 44 24
    // 92 54
    // 41 13
    // 35 52
    // 82 72
    // 38 14
    // 23 95
    // 3 37
    // 7 54
    // 28 5
    // 44 30
    // 9 38
    // 53 87
    // 14 57
    // 84 31
    // 44 75
    // 52 76
    // 41 45
    // 34 72
    // 68 84
    // 10 41
    // 89 51
    // 11 32
    // 90 35
    // 77 65
    // 28 19
    // 88 23
    // 71 88
    // 79 51
    // 89 78
    // 63 35
    // 80 11
    // 66 1
    // 35 56
    // 17 17
    // 62 66
    // 41 51
    // 35 58
    // 34 76
    // 76 73
    // 38 52
    // 77 45
    // 97 89
    // 46 100
    // 11 66
    // 12 98
    // 78 62
    // 48 12
    // 38 25
    // 67 87
    // 1 55
    // 51 86
    // 73 64
    // 26 36
    // 6 15
    // 10 54
    // 50 4
    // 46 72
    // 55 20
    // 90 9
    // 63 66
    // 54 88
    // 78 95
    // 10 72
    // 72 61
    // 7 19
    // 61 61
    // 69 59
    // 43 90
    // 78 93
    // 33 2
    // 68 66
    // 80 51
    // 7 31
    // 24 4
    // 72 40
    // 70 69
    // 91 93
    // 81 24
    // 28 11
    // 15 70
    // 9 68
    // 57 73
    // 49 21
    // 76 23
    // 57 44
    // 23 87
    // 22 95
    // 23 46
    // 38 27
    // 70 65
    // 51 44
    // 40 10
    // 6 14 1585
    // 77 6 7804
    // 74 77 2361
    // 64 74 8579
    // 64 12 579
    // 72 12 570
    // 44 72 706
    // 44 94 979
    // 98 94 3183
    // 98 99 7397
    // 99 17 5345
    // 17 91 4345
    // 11 91 893
    // 11 95 3257
    // 95 63 575
    // 63 8 4261
    // 8 9 5050
    // 9 42 6969
    // 42 28 1340
    // 85 28 7980
    // 85 24 4038
    // 24 55 5097
    // 30 55 9706
    // 33 30 3363
    // 33 62 6278
    // 62 48 7637
    // 68 48 976
    // 68 27 9784
    // 7 27 5618
    // 7 52 9032
    // 25 52 3448
    // 25 69 8025
    // 47 69 4215
    // 47 73 2053
    // 73 71 3792
    // 79 71 9370
    // 79 5 6118
    // 5 66 2546
    // 66 50 6077
    // 50 75 9235
    // 75 21 9411
    // 21 16 2120
    // 16 59 3187
    // 59 80 6143
    // 35 80 1383
    // 32 35 8773
    // 18 32 2350
    // 18 100 3551
    // 15 100 4399
    // 19 15 1162
    // 19 53 5821
    // 53 83 9781
    // 57 83 2027
    // 57 49 9117
    // 67 49 2450
    // 86 67 9737
    // 86 65 7568
    // 61 65 9944
    // 45 61 403
    // 3 45 9640
    // 43 3 3911
    // 76 43 8824
    // 76 41 4156
    // 41 88 4784
    // 88 81 1947
    // 36 81 6079
    // 36 23 9866
    // 23 58 6309
    // 38 58 6927
    // 54 38 5763
    // 54 46 1633
    // 20 46 1615
    // 39 20 8453
    // 92 39 8348
    // 92 34 152
    // 34 93 1018
    // 93 22 1640
    // 78 22 6442
    // 96 78 2072
    // 60 96 1268
    // 89 60 9763
    // 90 89 7804
    // 2 90 4080
    // 1 2 4418
    // 10 1 5303
    // 10 51 2650
    // 31 51 5540
    // 97 31 1676
    // 70 97 1865
    // 87 70 9324
    // 87 13 137
    // 84 13 460
    // 84 4 9570
    // 4 37 9169
    // 29 37 5018
    // 29 40 9844
    // 40 26 3470
    // 26 82 3785
    // 56 82 2951`)
    // );
}
if (require.main === module) {
    main();
}
